/*****************************************************************************

The classic problem where philosophers sit around a table share one fork with
each adjacent philosopher. The goal is to control the access to the forks
avoiding a deadlock and allowing each philosopher to alternate between eating
and thinking while performing required intermediate etiquette steps.

The problem scales in two directions:
1- Philosophers: The number of philosophers.
2- Steps: The number of etiquette steps.

*****************************************************************************/

const N = 10
const K = 5

const Philosophers = N
const Steps = K

range Phil = 0..Philosophers-1

def LeftP(p) = p
def RightP(p) = (p+1) % Philosophers

def LeftF(f) = f == 0 ? Philosophers-1 : f-1
def RightF(f) = f

/*****************************************************************************/


Philosopher(Pid=0) = Idle,
  Idle = (think[Pid] -> Hungry),
  Hungry = (take[Pid][LeftP(Pid)] -> Etiquete[Steps]),
  Etiquete[0] = Ready,
  Etiquete[s:1..Steps] = (step[Pid] -> Etiquete[s-1]),
  Ready = (
    take[Pid][RightP(Pid)] -> eat[Pid] ->
      release[Pid][LeftP(Pid)] -> release[Pid][RightP(Pid)] -> Idle).


Fork(Fid=0) = OnTable,
  OnTable = (
    take[LeftF(Fid)][Fid]     -> OnHand  |
    take[RightF(Fid)][Fid]    -> OnHand  ),
  OnHand  = (
    release[LeftF(Fid)][Fid]  -> OnTable |
    release[RightF(Fid)][Fid] -> OnTable ).


Monitor(Id=0) = (eat[Id] -> Done),
  Done = (eat[Id] -> Done | eat.all -> Monitor).


/*****************************************************************************/

||Plant = (forall [p:Phil] (Philosopher(p) || Fork(p) || Monitor(p))).

set Take = {take[0][0], take[0][1], take[1][1], take[1][2], take[2][2], take[2][3], take[3][3], take[3][4], take[4][4], take[4][5], take[5][5], take[5][6], take[6][6], take[6][7], take[7][7], take[7][8], take[8][8], take[8][9], take[9][9], take[9][0]}
set Release = {release[0][0], release[0][1], release[1][1], release[1][2], release[2][2], release[2][3], release[3][3], release[3][4], release[4][4], release[4][5], release[5][5], release[5][6], release[6][6], release[6][7], release[7][7], release[7][8], release[8][8], release[8][9], release[9][9], release[9][0]}
set Allactions = {think[p:Phil], step[p:Phil], eat[p:Phil], eat.all,
                    Take, Release}
fluent F = <eat.all, Allactions\{eat.all}>
assert A = F
controllerSpec Goal = {
  controllable = {Take}
  liveness = {A}
}
assert Check = ([]<>A)

controller ||MonolithicController = Plant~{Goal}.

heuristic ||DirectedController = Plant~{Goal}.

